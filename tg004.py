from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InputFile
from aiogram import F, types
from aiogram.types import Message
import sqlite3
import os
import asyncio
import sympy as sp
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('tasks.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task TEXT NOT NULL,
    deadline DATE DEFAULT NULL
);
''')
conn.commit()

# –¢–æ–∫–µ–Ω API –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω!)
API_TOKEN = '7879932904:AAEMNBlZ-M5cMSjuG5Wgg9jRm-ZESfjrfq0'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=API_TOKEN)
router = Router()

# –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã (–ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤)
audio_file_path = "./music/welcome.mp3"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@router.message(CommandStart())
async def start_command(message: Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    buttons = [
        KeyboardButton(text="–°–ø—Ä–∞–≤–∫–∞ /help"),
        KeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ /math"),
        KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á /tasklist"),
        KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª üìé"),
        KeyboardButton(text="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É ‚ô´Ô∏è")
    ]

    keyboard = ReplyKeyboardMarkup(
        keyboard=[buttons],
        resize_keyboard=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞–º–∏
    pass

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                         reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π
@router.message(F.text.contains("/help"))
async def help_command(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "- –°–ø—Ä–∞–≤–∫–∞ (/help)\n"
                         "- –†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ (/math)\n"
                         "- –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (/tasklist)\n"
                         "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (/add_task)\n"
                         "- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (/delete_task)\n"
                         "- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ üìé\n"
                         "- –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ ‚ô´Ô∏è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å Sympy
@router.message(F.text.startswith('/math'))
async def math_command(message: Message):
    try:
        expression = message.text.split(maxsplit=1)[1].strip()
        if not expression:
            raise ValueError("–í—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        result = sp.sympify(expression).evalf()
        await message.answer(f"–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è `{expression}` —Ä–∞–≤–Ω–æ `{result}`")
    except Exception as err:
        logger.error(err)
        await message.answer("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è.")

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
@router.message(F.text.startswith('/tasklist'))
async def task_list(message: Message):
    cursor.execute("SELECT * FROM tasks ORDER BY deadline ASC;")
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        output = '\n'.join([f'{row[0]}. {row[1]} (–°—Ä–æ–∫: {row[2]})' for row in rows])
        await message.answer(f"<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:</b>\n{output}", parse_mode='HTML')

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
@router.message(F.text.startswith('/add_task'))
async def add_task(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) != 3 or not parts[2]:
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.\n–ü—Ä–∏–º–µ—Ä: /add_task –ù–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–¥–∞—á–∏ –î–∞—Ç–∞")
        return

    task_name = parts[1]
    deadline = parts[2]

    # –ü—Ä–æ–±—É–µ–º –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_name}, –°—Ä–æ–∫: {deadline}")

    try:
        date_obj = datetime.strptime(deadline, "%Y-%m-%d").date()
        cursor.execute("INSERT INTO tasks(task, deadline) VALUES (?, ?)", (task_name, str(date_obj)))
        conn.commit()
        await message.answer(f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ \"{task_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {deadline}.")
    except ValueError as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î.")


# –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
@router.message(F.text.startswith('/delete_task'))
async def delete_task(message: Message):
    try:
        task_id = int(message.text.split()[1])
        cursor.execute("DELETE FROM tasks WHERE id=?", (task_id,))
        conn.commit()
        await message.answer(f"–ó–∞–¥–∞—á–∞ #{task_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    except (ValueError, IndexError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /delete_task 1")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
@router.message(F.text.contains("üìé"))
async def upload_files(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

# –ü—Ä–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@router.message(F.content_type == types.ContentType.DOCUMENT)
async def handle_document(message: Message):
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    # –ò–º—è —Ñ–∞–π–ª–∞ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    filename = message.document.file_name
    path_to_save = os.path.join('./uploads/', filename)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    if not os.path.exists("./uploads/"):
        os.makedirs("./uploads/")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    with open(path_to_save, 'wb') as new_file:
        new_file.write(downloaded_file.read())

    await message.reply(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {filename}")
# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
@router.message(F.text.contains("‚ô´Ô∏è"))
async def send_audio(message: Message):
    audio = FSInputFile(audio_file_path)
    await bot.send_audio(chat_id=message.chat.id, audio=audio)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp = Dispatcher()
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç-–ø—É–ª–ª–∏–Ω–≥–∞
if __name__ == "__main__":
    async def main():
        try:
            # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –≤–µ–±—Ö—É–∫–∏
            await bot.delete_webhook(drop_pending_updates=True)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–ª–∏–Ω–≥–∞
            async with bot:
                await dp.start_polling(bot)
        except KeyboardInterrupt:
            print("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ—Ä—É—Ç–∏–Ω–∞ —Å –ø–æ–º–æ—â—å—é asyncio.run()
    asyncio.run(main())