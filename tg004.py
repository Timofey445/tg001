# @Project_YandexLMS_Bot
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InputFile
from aiogram import F, types
from aiogram.types import Message
import sqlite3
import os
import asyncio
import sympy as sp
import logging
from datetime import datetime


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

conn = sqlite3.connect('tasks.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task TEXT NOT NULL,
    deadline DATE DEFAULT NULL
);
''')
conn.commit()


class Task:
    def __init__(self, task_id=None, task=None, deadline=None):
        self.task_id = task_id
        self.task = task
        self.deadline = deadline

    @classmethod
    def create(cls, task, deadline):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∑–∞–¥–∞—á–∏"""
        cursor.execute("INSERT INTO tasks(task, deadline) VALUES (?, ?)",
                       (task, deadline))
        conn.commit()
        return cls(cursor.lastrowid, task, deadline)

    @classmethod
    def all(cls):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î"""
        cursor.execute("SELECT * FROM tasks ORDER BY deadline ASC;")
        rows = cursor.fetchall()
        return [cls(row[0], row[1], row[2]) for row in rows]

    @classmethod
    def find_by_id(cls, task_id):
        """–ò—â–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID"""
        cursor.execute("SELECT * FROM tasks WHERE id=?;", (task_id,))
        row = cursor.fetchone()
        if row:
            return cls(row[0], row[1], row[2])
        return None

    def update(self, task=None, deadline=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        updates = []
        params = []
        if task is not None:
            updates.append("task=?")
            params.append(task)
        if deadline is not None:
            updates.append("deadline=?")
            params.append(deadline)
        params.append(self.task_id)
        sql_query = f"UPDATE tasks SET {','.join(updates)} WHERE id=?"
        cursor.execute(sql_query, tuple(params))
        conn.commit()

    def delete(self):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ë–î"""
        cursor.execute("DELETE FROM tasks WHERE id=?", (self.task_id,))
        conn.commit()


API_TOKEN = '7879932904:AAEMNBlZ-M5cMSjuG5Wgg9jRm-ZESfjrfq0'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=API_TOKEN)
router = Router()


audio_file_path = "musics/welcome.mp3"


@router.message(CommandStart())
async def start_command(message: Message):
    buttons = [
        KeyboardButton(text="–°–ø—Ä–∞–≤–∫–∞ /help"),
        KeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ /math"),
        KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á /tasklist"),
        KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª üìé"),
        KeyboardButton(text="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É ‚ô´Ô∏è")
    ]

    keyboard = ReplyKeyboardMarkup(
        keyboard=[buttons],
        resize_keyboard=True
    )


    pass

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                         reply_markup=keyboard)


@router.message(F.text.contains("/help"))
async def help_command(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "- –°–ø—Ä–∞–≤–∫–∞ (/help)\n"
                         "- –†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ (/math)\n"
                         "- –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (/tasklist)\n"
                         "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (/add_task)\n"
                         "- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (/delete_task)\n"
                         "- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ üìé\n"
                         "- –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ ‚ô´Ô∏è")


@router.message(F.text.startswith('/math'))
async def math_command(message: Message):
    try:
        expression = message.text.split(maxsplit=1)[1].strip()
        if not expression:
            raise ValueError("–í—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        result = sp.sympify(expression).evalf()
        await message.answer(f"–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è `{expression}` —Ä–∞–≤–Ω–æ `{result}`")
    except Exception as err:
        logger.error(err)
        await message.answer("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è.")


@router.message(F.text.startswith('/tasklist'))
async def task_list(message: Message):
    tasks = Task.all()
    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        output = '\n'.join([f'{t.task_id}. {t.task} (–°—Ä–æ–∫: {t.deadline})' for t in tasks])
        await message.answer(f"<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:</b>\n{output}", parse_mode='HTML')


@router.message(F.text.startswith('/add_task'))
async def add_task(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) != 3 or not parts[2]:
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.\n–ü—Ä–∏–º–µ—Ä: /add_task –ù–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–¥–∞—á–∏ –î–∞—Ç–∞")
        return

    task_name = parts[1]
    deadline = parts[2]


    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_name}, –°—Ä–æ–∫: {deadline}")

    try:
        date_obj = datetime.strptime(deadline, "%Y-%m-%d").date()
        Task.create(task_name, str(date_obj))
        await message.answer(f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ \"{task_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {deadline}.")
    except ValueError as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î.")


@router.message(F.text.startswith('/delete_task'))
async def delete_task(message: Message):
    try:
        task_id = int(message.text.split()[1])
        task = Task.find_by_id(task_id)
        if task:
            task.delete()
            await message.answer(f"–ó–∞–¥–∞—á–∞ ‚Ññ{task_id}: '{task.task}' –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer(f"–ó–∞–¥–∞—á–∞ —Å –Ω–æ–º–µ—Ä–æ–º {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except (ValueError, IndexError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /delete_task 1")


@router.message(F.text.contains("üìé"))
async def upload_files(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


@router.message(F.content_type == types.ContentType.DOCUMENT)
async def handle_document(message: Message):
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    filename = message.document.file_name
    path_to_save = os.path.join('./uploads/', filename)

    if not os.path.exists("./uploads/"):
        os.makedirs("./uploads/")

    with open(path_to_save, 'wb') as new_file:
        new_file.write(downloaded_file.read())

    await message.reply(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {filename}")


@router.message(F.text.contains("‚ô´Ô∏è"))
async def send_audio(message: Message):
    audio = FSInputFile(audio_file_path)
    await bot.send_audio(chat_id=message.chat.id, audio=audio)

dp = Dispatcher()
dp.include_router(router)

if __name__ == "__main__":
    async def main():
        try:
            await bot.delete_webhook(drop_pending_updates=True)

            async with bot:
                await dp.start_polling(bot)
        except KeyboardInterrupt:
            print("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    asyncio.run(main())